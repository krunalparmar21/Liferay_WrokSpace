/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.inexture.studentService.model.impl;

import com.inexture.studentService.model.StudentDemo;
import com.inexture.studentService.model.StudentDemoModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the StudentDemo service. Represents a row in the &quot;stud_StudentDemo&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>StudentDemoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StudentDemoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see StudentDemoImpl
 * @generated
 */
@JSON(strict = true)
public class StudentDemoModelImpl
	extends BaseModelImpl<StudentDemo> implements StudentDemoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a student demo model instance should use the <code>StudentDemo</code> interface instead.
	 */
	public static final String TABLE_NAME = "stud_StudentDemo";

	public static final Object[][] TABLE_COLUMNS = {
		{"studentId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"createdby", Types.BIGINT},
		{"modifiedby", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"enrollmentNo", Types.VARCHAR},
		{"firstName", Types.VARCHAR}, {"lastName", Types.VARCHAR},
		{"contactNo", Types.VARCHAR}, {"city", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("studentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdby", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedby", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("enrollmentNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("firstName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lastName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contactNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("city", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table stud_StudentDemo (studentId LONG not null primary key,groupId LONG,companyId LONG,createdby LONG,modifiedby VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,enrollmentNo VARCHAR(75) null,firstName VARCHAR(75) null,lastName VARCHAR(75) null,contactNo VARCHAR(75) null,city VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table stud_StudentDemo";

	public static final String ORDER_BY_JPQL =
		" ORDER BY studentDemo.studentId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY stud_StudentDemo.studentId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FIRSTNAME_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long STUDENTID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public StudentDemoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _studentId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setStudentId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _studentId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return StudentDemo.class;
	}

	@Override
	public String getModelClassName() {
		return StudentDemo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<StudentDemo, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<StudentDemo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<StudentDemo, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((StudentDemo)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<StudentDemo, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<StudentDemo, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(StudentDemo)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<StudentDemo, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<StudentDemo, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<StudentDemo, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<StudentDemo, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<StudentDemo, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<StudentDemo, Object>>();
		Map<String, BiConsumer<StudentDemo, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<StudentDemo, ?>>();

		attributeGetterFunctions.put("studentId", StudentDemo::getStudentId);
		attributeSetterBiConsumers.put(
			"studentId",
			(BiConsumer<StudentDemo, Long>)StudentDemo::setStudentId);
		attributeGetterFunctions.put("groupId", StudentDemo::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<StudentDemo, Long>)StudentDemo::setGroupId);
		attributeGetterFunctions.put("companyId", StudentDemo::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<StudentDemo, Long>)StudentDemo::setCompanyId);
		attributeGetterFunctions.put("createdby", StudentDemo::getCreatedby);
		attributeSetterBiConsumers.put(
			"createdby",
			(BiConsumer<StudentDemo, Long>)StudentDemo::setCreatedby);
		attributeGetterFunctions.put("modifiedby", StudentDemo::getModifiedby);
		attributeSetterBiConsumers.put(
			"modifiedby",
			(BiConsumer<StudentDemo, String>)StudentDemo::setModifiedby);
		attributeGetterFunctions.put("createDate", StudentDemo::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<StudentDemo, Date>)StudentDemo::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", StudentDemo::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<StudentDemo, Date>)StudentDemo::setModifiedDate);
		attributeGetterFunctions.put(
			"enrollmentNo", StudentDemo::getEnrollmentNo);
		attributeSetterBiConsumers.put(
			"enrollmentNo",
			(BiConsumer<StudentDemo, String>)StudentDemo::setEnrollmentNo);
		attributeGetterFunctions.put("firstName", StudentDemo::getFirstName);
		attributeSetterBiConsumers.put(
			"firstName",
			(BiConsumer<StudentDemo, String>)StudentDemo::setFirstName);
		attributeGetterFunctions.put("lastName", StudentDemo::getLastName);
		attributeSetterBiConsumers.put(
			"lastName",
			(BiConsumer<StudentDemo, String>)StudentDemo::setLastName);
		attributeGetterFunctions.put("contactNo", StudentDemo::getContactNo);
		attributeSetterBiConsumers.put(
			"contactNo",
			(BiConsumer<StudentDemo, String>)StudentDemo::setContactNo);
		attributeGetterFunctions.put("city", StudentDemo::getCity);
		attributeSetterBiConsumers.put(
			"city", (BiConsumer<StudentDemo, String>)StudentDemo::setCity);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getStudentId() {
		return _studentId;
	}

	@Override
	public void setStudentId(long studentId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_studentId = studentId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getCreatedby() {
		return _createdby;
	}

	@Override
	public void setCreatedby(long createdby) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createdby = createdby;
	}

	@JSON
	@Override
	public String getModifiedby() {
		if (_modifiedby == null) {
			return "";
		}
		else {
			return _modifiedby;
		}
	}

	@Override
	public void setModifiedby(String modifiedby) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedby = modifiedby;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getEnrollmentNo() {
		if (_enrollmentNo == null) {
			return "";
		}
		else {
			return _enrollmentNo;
		}
	}

	@Override
	public void setEnrollmentNo(String enrollmentNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_enrollmentNo = enrollmentNo;
	}

	@JSON
	@Override
	public String getFirstName() {
		if (_firstName == null) {
			return "";
		}
		else {
			return _firstName;
		}
	}

	@Override
	public void setFirstName(String firstName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_firstName = firstName;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalFirstName() {
		return getColumnOriginalValue("firstName");
	}

	@JSON
	@Override
	public String getLastName() {
		if (_lastName == null) {
			return "";
		}
		else {
			return _lastName;
		}
	}

	@Override
	public void setLastName(String lastName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lastName = lastName;
	}

	@JSON
	@Override
	public String getContactNo() {
		if (_contactNo == null) {
			return "";
		}
		else {
			return _contactNo;
		}
	}

	@Override
	public void setContactNo(String contactNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_contactNo = contactNo;
	}

	@JSON
	@Override
	public String getCity() {
		if (_city == null) {
			return "";
		}
		else {
			return _city;
		}
	}

	@Override
	public void setCity(String city) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_city = city;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), StudentDemo.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public StudentDemo toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, StudentDemo>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StudentDemoImpl studentDemoImpl = new StudentDemoImpl();

		studentDemoImpl.setStudentId(getStudentId());
		studentDemoImpl.setGroupId(getGroupId());
		studentDemoImpl.setCompanyId(getCompanyId());
		studentDemoImpl.setCreatedby(getCreatedby());
		studentDemoImpl.setModifiedby(getModifiedby());
		studentDemoImpl.setCreateDate(getCreateDate());
		studentDemoImpl.setModifiedDate(getModifiedDate());
		studentDemoImpl.setEnrollmentNo(getEnrollmentNo());
		studentDemoImpl.setFirstName(getFirstName());
		studentDemoImpl.setLastName(getLastName());
		studentDemoImpl.setContactNo(getContactNo());
		studentDemoImpl.setCity(getCity());

		studentDemoImpl.resetOriginalValues();

		return studentDemoImpl;
	}

	@Override
	public StudentDemo cloneWithOriginalValues() {
		StudentDemoImpl studentDemoImpl = new StudentDemoImpl();

		studentDemoImpl.setStudentId(
			this.<Long>getColumnOriginalValue("studentId"));
		studentDemoImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		studentDemoImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		studentDemoImpl.setCreatedby(
			this.<Long>getColumnOriginalValue("createdby"));
		studentDemoImpl.setModifiedby(
			this.<String>getColumnOriginalValue("modifiedby"));
		studentDemoImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		studentDemoImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		studentDemoImpl.setEnrollmentNo(
			this.<String>getColumnOriginalValue("enrollmentNo"));
		studentDemoImpl.setFirstName(
			this.<String>getColumnOriginalValue("firstName"));
		studentDemoImpl.setLastName(
			this.<String>getColumnOriginalValue("lastName"));
		studentDemoImpl.setContactNo(
			this.<String>getColumnOriginalValue("contactNo"));
		studentDemoImpl.setCity(this.<String>getColumnOriginalValue("city"));

		return studentDemoImpl;
	}

	@Override
	public int compareTo(StudentDemo studentDemo) {
		long primaryKey = studentDemo.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof StudentDemo)) {
			return false;
		}

		StudentDemo studentDemo = (StudentDemo)object;

		long primaryKey = studentDemo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<StudentDemo> toCacheModel() {
		StudentDemoCacheModel studentDemoCacheModel =
			new StudentDemoCacheModel();

		studentDemoCacheModel.studentId = getStudentId();

		studentDemoCacheModel.groupId = getGroupId();

		studentDemoCacheModel.companyId = getCompanyId();

		studentDemoCacheModel.createdby = getCreatedby();

		studentDemoCacheModel.modifiedby = getModifiedby();

		String modifiedby = studentDemoCacheModel.modifiedby;

		if ((modifiedby != null) && (modifiedby.length() == 0)) {
			studentDemoCacheModel.modifiedby = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			studentDemoCacheModel.createDate = createDate.getTime();
		}
		else {
			studentDemoCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			studentDemoCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			studentDemoCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		studentDemoCacheModel.enrollmentNo = getEnrollmentNo();

		String enrollmentNo = studentDemoCacheModel.enrollmentNo;

		if ((enrollmentNo != null) && (enrollmentNo.length() == 0)) {
			studentDemoCacheModel.enrollmentNo = null;
		}

		studentDemoCacheModel.firstName = getFirstName();

		String firstName = studentDemoCacheModel.firstName;

		if ((firstName != null) && (firstName.length() == 0)) {
			studentDemoCacheModel.firstName = null;
		}

		studentDemoCacheModel.lastName = getLastName();

		String lastName = studentDemoCacheModel.lastName;

		if ((lastName != null) && (lastName.length() == 0)) {
			studentDemoCacheModel.lastName = null;
		}

		studentDemoCacheModel.contactNo = getContactNo();

		String contactNo = studentDemoCacheModel.contactNo;

		if ((contactNo != null) && (contactNo.length() == 0)) {
			studentDemoCacheModel.contactNo = null;
		}

		studentDemoCacheModel.city = getCity();

		String city = studentDemoCacheModel.city;

		if ((city != null) && (city.length() == 0)) {
			studentDemoCacheModel.city = null;
		}

		return studentDemoCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<StudentDemo, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<StudentDemo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<StudentDemo, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((StudentDemo)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<StudentDemo, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<StudentDemo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<StudentDemo, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((StudentDemo)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, StudentDemo>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					StudentDemo.class, ModelWrapper.class);

	}

	private long _studentId;
	private long _groupId;
	private long _companyId;
	private long _createdby;
	private String _modifiedby;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _enrollmentNo;
	private String _firstName;
	private String _lastName;
	private String _contactNo;
	private String _city;

	public <T> T getColumnValue(String columnName) {
		Function<StudentDemo, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((StudentDemo)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("studentId", _studentId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("createdby", _createdby);
		_columnOriginalValues.put("modifiedby", _modifiedby);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("enrollmentNo", _enrollmentNo);
		_columnOriginalValues.put("firstName", _firstName);
		_columnOriginalValues.put("lastName", _lastName);
		_columnOriginalValues.put("contactNo", _contactNo);
		_columnOriginalValues.put("city", _city);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("studentId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("createdby", 8L);

		columnBitmasks.put("modifiedby", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("enrollmentNo", 128L);

		columnBitmasks.put("firstName", 256L);

		columnBitmasks.put("lastName", 512L);

		columnBitmasks.put("contactNo", 1024L);

		columnBitmasks.put("city", 2048L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private StudentDemo _escapedModel;

}